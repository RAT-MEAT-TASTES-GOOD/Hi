import random
import os


class Player:
    def __init__(self, name, x, y):
        self.name = name
        self.x = x
        self.y = y
        self.inventory = []
        self.health = 100
        self.attack_damage = 10

    def move(self, direction):
        if direction == "north":
            self.y -= 1
        elif direction == "south":
            self.y += 1
        elif direction == "west":
            self.x -= 1
        elif direction == "east":
            self.x += 1

    def display_position(self):
        print("Current position: ({}, {})".format(self.x, self.y))

    def display_inventory(self):
        if self.inventory:
            print("Inventory:")
            for item in self.inventory:
                print("- " + item)
        else:
            print("Inventory is empty.")

    def add_to_inventory(self, item):
        self.inventory.append(item)

    def remove_from_inventory(self, item):
        if item in self.inventory:
            self.inventory.remove(item)

    def attack(self, enemy):
        damage = random.randint(self.attack_damage - 5, self.attack_damage + 5)
        enemy.health -= damage
        print("You attack the {} for {} damage!".format(enemy.name, damage))

    def take_damage(self, damage):
        self.health -= damage
        if self.health <= 0:
            print("You have been defeated. Game over.")
            exit()


class Enemy:
    def __init__(self, name, x, y, health, attack_damage):
        self.name = name
        self.x = x
        self.y = y
        self.health = health
        self.attack_damage = attack_damage

    def attack(self, player):
        damage = random.randint(self.attack_damage - 3, self.attack_damage + 3)
        player.take_damage(damage)
        print("The {} attacks you for {} damage!".format(self.name, damage))


class Object:
    def __init__(self, name, x, y, can_pickup=False):
        self.name = name
        self.x = x
        self.y = y
        self.can_pickup = can_pickup

    def interact(self, player):
        if self.can_pickup:
            player.add_to_inventory(self.name)
            print("You picked up the {}.".format(self.name))
        else:
            print("You interact with the {}.".format(self.name))


class GameWorld:
    def __init__(self, width, height):
        self.width = width
        self.height = height
        self.objects = []
        self.npcs = []
        self.enemies = []

    def add_object(self, obj):
        self.objects.append(obj)

    def add_npc(self, npc):
        self.npcs.append(npc)

    def add_enemy(self, enemy):
        self.enemies.append(enemy)

    def get_objects_at_position(self, x, y):
        objects_at_position = []
        for obj in self.objects:
            if obj.x == x and obj.y == y:
                objects_at_position.append(obj)
        return objects_at_position

    def get_npcs_at_position(self, x, y):
        npcs_at_position = []
        for npc in self.npcs:
            if npc.x == x and npc.y == y:
                npcs_at_position.append(npc)
        return npcs_at_position

    def get_enemies_at_position(self, x, y):
        enemies_at_position = []
        for enemy in self.enemies:
            if enemy.x == x and enemy.y == y:
                enemies_at_position.append(enemy)
        return enemies_at_position

    def clear_console(self):
        os.system("cls" if os.name == "nt" else "clear")

    def display_game_world(self, player):
        self.clear_console()

        game_map = [[" " for _ in range(self.width)] for _ in range(self.height)]

        for obj in self.objects:
            game_map[obj.y][obj.x] = "O"

        for npc in self.npcs:
            game_map[npc.y][npc.x] = "N"

        for enemy in self.enemies:
            game_map[enemy.y][enemy.x] = "E"

        game_map[player.y][player.x] = "P"

        for row in game_map:
            for cell in row:
                print(cell, end=" ")
            print()

        player.display_position()


def main():
    player_name = input("Enter your name: ")
    player = Player(player_name, 0, 0)

    game_world = GameWorld(5, 5)

    npc1 = NPC("Bob", 2, 3)
    npc2 = NPC("Alice", 1, 1)

    game_world.add_npc(npc1)
    game_world.add_npc(npc2)

    object1 = Object("Chest", 1, 3, can_pickup=True)
    object2 = Object("Table", 3, 1, can_pickup=False)

    game_world.add_object(object1)
    game_world.add_object(object2)

    enemy1 = Enemy("Goblin", 2, 2, 50, 8)
    enemy2 = Enemy("Orc", 4, 4, 80, 12)

    game_world.add_enemy(enemy1)
    game_world.add_enemy(enemy2)

    print("Welcome to the Open World Game, {}!".format(player.name))
    print("You are currently at position (0, 0).")
    print("Type 'help' for a list of available commands.")

    while True:
        game_world.display_game_world(player)

        command = input("Enter a command: ").lower()

        if command == "help":
            print("Available commands:")
            print("'north', 'south', 'west', 'east' - Move in a direction")
            print("'position' - Display current position")
            print("'look' - Look around for objects, NPCs, and enemies")
            print("'interact <object>' - Interact with an object")
            print("'talk <npc>' - Talk to an NPC")
            print("'inventory' - Display inventory")
            print("'attack' - Attack an enemy")
            print("'quit' - Quit the game")
        elif command in ["north", "south", "west", "east"]:
            player.move(command)
        elif command == "position":
            player.display_position()
        elif command == "look":
            objects_at_position = game_world.get_objects_at_position(player.x, player.y)
            npcs_at_position = game_world.get_npcs_at_position(player.x, player.y)
            enemies_at_position = game_world.get_enemies_at_position(player.x, player.y)

            if objects_at_position:
                print("Objects here:")
                for obj in objects_at_position:
                    print("- Object:", obj.name)

            if npcs_at_position:
                print("NPCs here:")
                for npc in npcs_at_position:
                    print("- NPC:", npc.name)

            if enemies_at_position:
                print("Enemies here:")
                for enemy in enemies_at_position:
                    print("- Enemy:", enemy.name)

            if not objects_at_position and not npcs_at_position and not enemies_at_position:
                print("Nothing interesting here.")
        elif command.startswith("interact"):
            object_name = command.split(" ", 1)[1]
            objects_at_position = game_world.get_objects_at_position(player.x, player.y)

            for obj in objects_at_position:
                if obj.name.lower() == object_name.lower():
                    obj.interact(player)
                    break
            else:
                print("No object named '{}' found here.".format(object_name))
        elif command.startswith("talk"):
            npc_name = command.split(" ", 1)[1]
            npcs_at_position = game_world.get_npcs_at_position(player.x, player.y)

            for npc in npcs_at_position:
                if npc.name.lower() == npc_name.lower():
                    npc.talk()
                    break
            else:
                print("No NPC named '{}' found here.".format(npc_name))
        elif command == "inventory":
            player.display_inventory()
        elif command == "attack":
            enemies_at_position = game_world.get_enemies_at_position(player.x, player.y)

            if enemies_at_position:
                enemy = random.choice(enemies_at_position)
                player.attack(enemy)
                if enemy.health > 0:
                    enemy.attack(player)
            else:
                print("No enemies found here.")
        elif command == "quit":
            print("Thanks for playing!")
            break
        else:
            print("Invalid command. Type 'help' for a list of available commands.")


# Start the game
main()
#This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
